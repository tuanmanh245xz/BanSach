@using WebBanSach.Model.ViewModel
@model ProductVM


<form method="post" asp-action="Upsert" enctype="multipart/form-data">
    <div class="border p-3 mt-4">
        <div class="row pb-2">
            <h2>@(Model.product.Id == 0 ? "Create": "Edit") Product</h2>
            <hr />
        </div>
        <div class="mb-3">
            <label asp-for=product.Title></label>
            <input asp-for=product.Title class="form-control" />
            <span asp-validation-for=product.Title class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for=product.Description></label>
            <textarea asp-for=product.Description class="form-control">

            </textarea>
            <span asp-validation-for=product.Description class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for=product.ISBN></label>
            <input asp-for=product.ISBN class="form-control" />
            <span asp-validation-for=product.ISBN class="text-danger"></span>
        </div>
       
        <div class="mb-3">
            <label asp-for=product.Author></label>
            <input asp-for=product.Author class="form-control" />
            <span asp-validation-for=product.Author class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for=product.Price50></label>
            <input asp-for=product.Price50 class="form-control" />
            <span asp-validation-for=product.Price50 class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for=product.Price100></label>
            <input asp-for=product.Price100 class="form-control" />
            <span asp-validation-for=product.Price100 class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for=product.ImageUrl></label>
            @* <input type="file" id="ImageUrl" asp-for=product.ImageUrl class="form-control" /> *@
            <input type="file" id="ImageUrl" name="file" asp-for=product.ImageUrl class="form-control" accept="image/*" />
            <span asp-validation-for=product.ImageUrl class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for=product.CategoryId></label>
            <select asp-for="product.CategoryId"
                    asp-items="Model.CategoryList" class="form-control">
                <option value="">-- Select category --</option>
            </select>
            <span asp-validation-for=product.CategoryId class="text-danger"></span>
        </div>
        
        <div class="mb-3">
            <label asp-for=product.CoverTypeId></label>
            <select asp-for="product.CoverTypeId"
                    asp-items="Model.CoverTypeList" class="form-control">
                <option value="">-- Select cover type --</option>
            </select>
            <span asp-validation-for=product.CoverTypeId class="text-danger"></span>
        </div>
      
        @if(Model.product.Id == 0)
        {
            <button type="submit" onclick="return ValidateInput()" class="btn btn-primary">Create</button>
        }
        else
        {
            <button type="submit" class="btn btn-primary">Update</button>
        }
        
        <a asp-controller="CoverType" asp-action="Index" class="btn btn-primary">Back To List</a>
    </div>

</form>
@section Scripts
{
    <partial name="_ValidationScriptsPartial" />
    <script>
        function ValidateInput() {
            if(document.getElementById("ImageUrl").value == "") {
                          Swal.fire({
                                  icon: "error",
                                  title: "Oops...",
                                  text: "Something went wrong!",
                                  footer: '<a href="#">Why do I have this issue?</a>'
                                });
                                return false;
            }
            return true;
         
        }
    </script>
    <script>
        tinymce.init({
          selector: 'textarea',
          plugins: [
            // Core editing features
            'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
            // Your account includes a free trial of TinyMCE premium features
            // Try the most popular premium features until Aug 26, 2025:
            'checklist', 'mediaembed', 'casechange', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'advtemplate', 'ai', 'uploadcare', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown','importword', 'exportword', 'exportpdf'
          ],
          toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography uploadcare | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
          tinycomments_mode: 'embedded',
          tinycomments_author: 'Author name',
          mergetags_list: [
            { value: 'First.Name', title: 'First Name' },
            { value: 'Email', title: 'Email' },
          ],
          ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
          uploadcare_public_key: '354e0aa8be0c329e41d5',
        });
    </script>
}
